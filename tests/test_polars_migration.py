#!/usr/bin/env python3
"""
Test script for Polars migration functionality
"""

import os
import sys
import tempfile

import pandas as pd

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.utils import parse_dna_file


def test_polars_parsing_ancestrydna():
    """Test Polars-based parsing of AncestryDNA format."""
    print("Testing Polars AncestryDNA parsing...")

    # Create sample AncestryDNA data
    sample_data = """#AncestryDNA raw data download
#This file was generated by AncestryDNA
#Genetic data is provided below as five TAB-separated columns
#Information about each column is provided in the first line
#of the file called "AncestryDNA Genetic Data File Format"
#Genetic data is provided below as five TAB-separated columns
#Information about each column is provided in the first line
#of the file called "AncestryDNA Genetic Data File Format"
rsid	chromosome	position	allele1	allele2
rs1	1	1000	A	A
rs2	2	2000	C	T
rs3	X	3000	G	G
"""

    # Create a mock uploaded file object (simulating Streamlit upload)
    class MockUploadedFile:
        def __init__(self, content):
            self.content = content

        def getvalue(self):
            return self.content.encode('utf-8')

    mock_file = MockUploadedFile(sample_data)

    try:
        # Parse using Polars
        df = parse_dna_file(mock_file, "AncestryDNA")

        # Verify structure
        assert df is not None, "DataFrame should not be None"
        assert len(df.columns) >= 2, "Should have at least rsid and genotype columns"
        assert "rsid" in df.columns, "Should have rsid column"
        assert "genotype" in df.columns, "Should have genotype column"

        # Check specific data
        assert len(df) == 3, f"Should have 3 rows, got {len(df)}"
        assert df.filter(df["rsid"] == "rs1").select("genotype").to_pandas().iloc[0, 0] == "AA", "rs1 should be AA"
        assert df.filter(df["rsid"] == "rs2").select("genotype").to_pandas().iloc[0, 0] == "CT", "rs2 should be CT"

        print("PASS: Polars AncestryDNA parsing works correctly")
        return True

    except Exception as e:
        print(f"FAIL: Polars AncestryDNA parsing failed: {e}")
        return False


def test_polars_parsing_23andme():
    """Test Polars-based parsing of 23andMe format."""
    print("Testing Polars 23andMe parsing...")

    # Create sample 23andMe data
    sample_data = """# This data file generated by 23andMe at: Mon Jan 01 12:00:00 2024
#
# This file contains raw genotype data, including data that is not used in 23andMe reports.
# This data has undergone a general quality review however only a subset of markers have been
# individually validated for accuracy. As such, this data is suitable only for research,
# educational, and informational use and not for medical or reproductive planning.
#
# Below is a text version of your data.  For each SNP, the first column is the SNP name (rsID),
# the second column is the chromosome, the third column is the position, and the fourth column
# is your genotype.
rs1	1	1000	AA
rs2	2	2000	CT
rs3	X	3000	GG
"""

    # Create a mock uploaded file object (simulating Streamlit upload)
    class MockUploadedFile:
        def __init__(self, content):
            self.content = content

        def getvalue(self):
            return self.content.encode('utf-8')

    mock_file = MockUploadedFile(sample_data)

    try:
        # Parse using Polars
        df = parse_dna_file(mock_file, "23andMe")

        # Verify structure
        assert df is not None, "DataFrame should not be None"
        assert len(df.columns) >= 3, "Should have rsid, chromosome, and genotype columns"
        assert "rsid" in df.columns, "Should have rsid column"
        assert "chromosome" in df.columns, "Should have chromosome column"
        assert "genotype" in df.columns, "Should have genotype column"

        # Check specific data
        assert len(df) == 3, f"Should have 3 rows, got {len(df)}"
        assert df.filter(df["rsid"] == "rs1").select("genotype").to_pandas().iloc[0, 0] == "AA", "rs1 should be AA"

        print("PASS: Polars 23andMe parsing works correctly")
        return True

    except Exception as e:
        print(f"FAIL: Polars 23andMe parsing failed: {e}")
        return False


def test_polars_parsing_myheritage():
    """Test Polars-based parsing of MyHeritage format."""
    print("Testing Polars MyHeritage parsing...")

    # Create sample MyHeritage data
    sample_data = """RSID	RESULT
rs1	AA
rs2	CT
rs3	GG
"""

    # Create a mock uploaded file object (simulating Streamlit upload)
    class MockUploadedFile:
        def __init__(self, content):
            self.content = content

        def getvalue(self):
            return self.content.encode('utf-8')

    mock_file = MockUploadedFile(sample_data)

    try:
        # Parse using Polars
        df = parse_dna_file(mock_file, "MyHeritage")

        # Verify structure
        assert df is not None, "DataFrame should not be None"
        assert len(df.columns) >= 2, "Should have rsid and genotype columns"
        assert "rsid" in df.columns, "Should have rsid column"
        assert "genotype" in df.columns, "Should have genotype column"

        # Check specific data
        assert len(df) == 3, f"Should have 3 rows, got {len(df)}"
        assert df.filter(df["rsid"] == "rs1").select("genotype").to_pandas().iloc[0, 0] == "AA", "rs1 should be AA"

        print("PASS: Polars MyHeritage parsing works correctly")
        return True

    except Exception as e:
        print(f"FAIL: Polars MyHeritage parsing failed: {e}")
        return False


def test_polars_dataframe_operations():
    """Test Polars DataFrame operations used in the codebase."""
    print("Testing Polars DataFrame operations...")

    try:
        import polars as pl

        # Create test data
        data = {
            "rsid": ["rs1", "rs2", "rs3"],
            "allele1": ["A", "C", "G"],
            "allele2": ["A", "T", "G"]
        }
        df = pl.DataFrame(data)

        # Test column operations (like in utils.py)
        df_with_genotype = df.with_columns(
            (pl.col("allele1") + pl.col("allele2")).alias("genotype")
        )

        # Verify genotype creation
        genotypes = df_with_genotype.select("genotype").to_pandas()["genotype"].tolist()
        assert genotypes == ["AA", "CT", "GG"], f"Expected ['AA', 'CT', 'GG'], got {genotypes}"

        # Test filtering (like in utils.py)
        valid_genotypes = ["AA", "CC", "GG", "TT", "AC", "AG", "AT", "CG", "CT", "GT"]
        df_filtered = df_with_genotype.filter(
            pl.col("genotype").is_in(valid_genotypes)
        )

        assert len(df_filtered) == 3, f"Should have 3 valid genotypes, got {len(df_filtered)}"

        print("PASS: Polars DataFrame operations work correctly")
        return True

    except Exception as e:
        print(f"FAIL: Polars DataFrame operations failed: {e}")
        return False


def test_polars_to_pandas_conversion():
    """Test conversion from Polars to Pandas DataFrame."""
    print("Testing Polars to Pandas conversion...")

    try:
        import polars as pl

        # Create Polars DataFrame
        data = {
            "rsid": ["rs1", "rs2", "rs3"],
            "genotype": ["AA", "CT", "GG"],
            "chromosome": ["1", "2", "X"]
        }
        pl_df = pl.DataFrame(data)

        # Convert to Pandas (like in app.py)
        pd_df = pl_df.to_pandas()

        # Verify conversion
        assert isinstance(pd_df, pd.DataFrame), "Should be Pandas DataFrame"
        assert len(pd_df) == 3, "Should have 3 rows"
        assert list(pd_df.columns) == ["rsid", "genotype", "chromosome"], "Columns should match"

        # Verify data integrity
        assert pd_df.iloc[0]["genotype"] == "AA", "First genotype should be AA"
        assert pd_df.iloc[1]["genotype"] == "CT", "Second genotype should be CT"

        print("PASS: Polars to Pandas conversion works correctly")
        return True

    except Exception as e:
        print(f"FAIL: Polars to Pandas conversion failed: {e}")
        return False


def run_polars_migration_tests():
    """Run all Polars migration tests."""
    print("POLARS MIGRATION TESTS")
    print("=" * 30)

    tests = [
        test_polars_parsing_ancestrydna,
        test_polars_parsing_23andme,
        test_polars_parsing_myheritage,
        test_polars_dataframe_operations,
        test_polars_to_pandas_conversion,
    ]

    passed = 0
    total = len(tests)

    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"FAIL: {test.__name__} - {str(e)}")

    print("\n" + "=" * 30)
    print(f"Tests passed: {passed}/{total}")
    if passed == total:
        print("All Polars migration tests passed!")
        return True
    else:
        print("Some Polars migration tests failed.")
        return False


if __name__ == "__main__":
    success = run_polars_migration_tests()
    if not success:
        exit(1)